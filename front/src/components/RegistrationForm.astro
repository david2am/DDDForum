---
import Snack from './Snack.astro'

---
<style>
    form {
        display: flex;
        flex-direction: column;
        gap: 1em;
        width: 45%;

        margin: 0 auto;
    }
     
    input {
        width: 100%;
        height: 3em;

        padding: 1em;
        border: 0.2em black solid;
    }

    button[type=submit] {
        width: 25%;
        padding: 0.7em 2em;
        text-align: center;

        background-color: rgb(237, 234, 228);
        border-radius: 0.7em;
    }
</style>
<Snack role="status">
    Success! Redirecting home.
</Snack>
<Snack role="alert">
    An error has ocurred.
</Snack>


<form action="/api/users" method="post">
    <p>Create Account</p>
    <input
        type="email"
        name="email"
        placeholder="email"
        required
    >
    <input
        type="text"
        name="username"
        placeholder="username"
    >
    <input
        type="text"
        name="firstname"
        placeholder="first name"
    >
    <input
        type="text"
        name="lastname"
        placeholder="last name"
    >
    <input
        type="password"
        name="password"
        placeholder="password"
        required
    >

    <p>Already have an account?</p>
    <p><a href="#">Login</a></p>
    <button type="submit">Submit</button>
</form>

<script>
    const homeUrl = import.meta.env.PUBLIC_CLIENT_BASE_URL
    const usersUrl = `${import.meta.env.PUBLIC_BACKEND_BASE_URL}/api/users`

    type UserData = {
        email: string;
        username: string;
        firstname?: string;
        lastname?: string;
        password: string;
    }
    type SnackProps = { role: 'alert' | 'status'; message: string; timeOut?: number }

    function getFormDataByName(form: any): UserData {
        return [ ...form.querySelectorAll('[name]') ]
            .reduce((acc, { name, value}) => 
                !value ? acc : { ...acc, ...{ [name]: value } },
                {}
            )
    }
    async function sendData(url: string, data: UserData) {
        const res = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })

        return res.json()
    }
    function showSnack({ role, message, timeOut = 5000 }: SnackProps) {
        const snack = document.querySelector(`[role="${role}"]`)!
        snack.querySelector('p')!.textContent = message
        snack.classList.remove('hide')

        const cb = () => {
            snack.classList.add('hide')
            if (role === 'status') { location.href = homeUrl }
        }

        setTimeout(cb, timeOut) 
    }
    function setCookie(name: string, value: string, expiryDate: Date) {
        const cookieStr = `${name}=${value}; expires=${expiryDate.toUTCString()}; path=/`
        document.cookie = cookieStr
    }

    const submitForm = async (event: SubmitEvent) => {
        event.preventDefault()

        const data = getFormDataByName(event.target)

        try {
            const res = await sendData(usersUrl, data)

            if (res.success) {
                setCookie('username', data.username, new Date(Date.now() + 60 * 60 * 1000))
                return showSnack({ role: 'status', message: 'Successful registration' })
            }
            
            showSnack({ role: 'alert', message: res.error })
            
        } catch (error) {
            console.error(error)
            showSnack({ role: 'alert', message: 'Server connection failed, please try again.' })
        }
    }

    const form = document.querySelector('form')!

    form.addEventListener('submit', submitForm)
</script>