---
interface Props {
    role: 'alert' | 'status'
}
const { role } = Astro.props
---
<style>
    div {
        display: flex;
        flex-direction: column;

        position: fixed;
        right: 0;
        top: 0;

        margin: 2.2em;

        background-color: white;
        box-shadow: 0.125em 0.25em 0.125em rgba(157, 149, 149, 0.3);
    }

    img {
        color: red;
        width: 1.4em;
    }

    p {
        padding: 1.2em 1em;
        font-size: medium;

        display: flex;
        gap: 1em;
    }

    progress[value] {
        --background: white; /* the background color */

        width: 100%;
        height: 0.45em;

        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;

        border: none;
        background: var(--background);
    }
    progress[value]::-webkit-progress-bar {
        background: var(--background);
    }
    progress[value]::-webkit-progress-value {
        background-image: linear-gradient(to right, greenyellow, lightgreen, aqua, lightblue, violet, fuchsia, pink);
    }
    progress[value]::-moz-progress-bar {
        background-image: linear-gradient(to right, greenyellow, lightgreen, aqua, lightblue, violet, fuchsia, pink);
    }

    .alert {
        color: red;
    }

    .alert-progress[value]::-webkit-progress-value {
        background-color: red;
        background-image: none;
    }
    .alert-progress[value]::-moz-progress-bar {
        background-color: red;
        background-image: none;
    }

    .hide {
        display: none;
    }
</style>

<script>
    function animateProgressbar(progress: any): void {
        const duration = 5000 // 5 seconds in milliseconds

        let progressWidth = 0
        const intervalId = setInterval(() => {
            if (progressWidth >= 100) {
                clearInterval(intervalId)
            } else {
                progressWidth += 100 / (duration / 10) // Increase progress by 100/500 = 0.2% every 10ms
                progress.value = progressWidth
            }
        }, 10) // Update progress every 10 milliseconds
    }

    const observer = new MutationObserver((mutationList) => {
        mutationList.forEach(mutation => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const target = mutation.target as Element
                const isVisible = getComputedStyle(target).getPropertyValue('display') !== 'none'

                if (isVisible) animateProgressbar(target.querySelector('progress'))
            }
        })
    })

    const snackList = document.querySelectorAll('div[role]')!

    snackList.forEach(snack => {
        observer.observe(snack, {
            attributes: true,
            attributeFilter: ['class'],
        })
    })
</script>

<div
    role={role}
    class=`${role} hide`
    aria-labelledby=`${role} message:`
>
    <p>
        {role === 'alert' && <img src="exclamacion.svg" alt="">}
        <slot/>
    </p>
    <progress class={`${role}-progress`} max="100" value="70">
</div>
